Introduction to tidyverse
========================================================
author: Anastasia Kuprina & Hazel Kavili
date: 09/06/2019
autosize: true

<style>

.tiny-text p {
  font-size: 5px; /*does not fucking work*/
}
.reveal .slides{
    height: 95% !important;  /* or other width */
}
.reveal h1, .reveal h2, .reveal h3 {
  word-wrap: normal;
  -moz-hyphens: none;
}
.reveal p, .reveal li, .reveal ul {
  font-size: 0.9em;
}
.small-code pre code {
  font-size: 0.9em;
}
</style>

Who are we?
========================================================

![Anastasia](https://ohjelmistoebusiness.fi/wp-content/uploads/2019/02/seriously-portrait2016_Anastasia-1-300x330.jpg)

- Has been doing data analysis since late 2016
- Knows SQL, R and Python. Studying more Python & stats
- Tries to improve diversity and inclusivity of tech by organising regular codebar workshops and other events

***

![Hazel](https://ohjelmistoebusiness.fi/wp-content/uploads/2019/02/Hazel-Kavili-seriously-highres-2-300x330.jpg)

- Studied Statistics (BSc and MSc) in Istanbul
- Worked on word-puzzle games in Wixot for 1.5 years 
- Founder of R-Ladies Istanbul
- Data Analyst in Seriously since November 2018


Why tidyverse?
========================================================
<br/>
- A huge community supported by RStudio themselves
- Help and support in social media
- tidytuesday

***
<div class = 'img-block' align="center">
<img src="./pics_for_presentation/tidyverse_popularity.png" width=1000px>
</div>

Some interesting tidyverse learning & usage data
========================================================
<div class = 'img-block' align="center">
<img src="./pics_for_presentation/survey_responses.png" width=1000px>
</div>

Data analysis workflow
========================================================
<div class = 'img-block' align="center">
<img src="./pics_for_presentation/process.png" width=900px>
</div>


Data analysis workflow: tidyverse version
========================================================
<div class = 'img-block' align="center">
<img src="./pics_for_presentation/tidyverse_map.png" width=1000px>
</div>


Data analysis workflow in our daily work
========================================================
<div class = 'img-block' align="center">
<img src="./pics_for_presentation/seriously_map.png" width=800px>
</div>

Let's get to it!
========================================================

**Step 1**: Start up a new project in RStudio (File -> New project and follow the instructions)

**Step 2**: Make sure to install packages:

```{r eval=FALSE}
install.packages('tidyverse', 'lubridate')
```
Note: if the package installer asks you whether or not to install with compilcation, respond 'n' for 'no'.

**Step 3**: Create a new script (File -> New script)

**Step 4**: Load libraries into the session & fetch the data:

```{r}
library(tidyverse)
library(lubridate)
library(reshape2)

df <- readr::read_csv('https://raw.githubusercontent.com/kuprinaga/R-ladies-workshop/master/nordic_data.csv')
```


Reading data in
========================================================


```{r eval=FALSE}
readr::read_csv('example.csv')
readr::read_tsv('example.tsv')
readr::read_table('example.txt')
```
<br/>
Why use readr?
- progress bar
- faster for large files
- outputs exactly what the column types are 
- can automatically parse data types
- outputs a tibble (tidy dataframe)


Kind of a side note
========================================================
### Why tibble?
- printing (shows only the first 10 rows, and all the columns that fit on screen + datatype)
- Tibbles are strict about subsetting: <br/>
-> [] always returns another tibble, <br/>
-> [[]] always returns a vector
- Tibbles do not return partial names
- Strings are strings, not factors


Let's learn more about the data
========================================================
class: small-code
```{r}
summary(df)
```

========================================================
class: small-code
```{r}
head(df, 10)
```

========================================================
class: small-code
```{r}
str(df)
```


Let's learn more about the data: tidyverse way
========================================================
class: small-code
```{r}
glimpse(df)
```


How to manipulate tidy-style
========================================================
<div class = 'img-block' align="center">
<img src="./pics_for_presentation/tidy_verbs.png" height=600>
</div>


Compare to the Base R way: select
========================================================
```{r eval=FALSE}
df[ , c('year', 'Country_Code')]

df %>% 
  select(year, Country_Code)
```


Compare to the Base R way: summarise by group
========================================================
class:small-code
```{r eval=FALSE}
head(aggregate(df$Population_female_of_total_,
          by = list(df$year),
          FUN = mean),
     3)

tapply(df$Population_female_of_total_, df$year, FUN=mean)

df %>% 
  group_by(year) %>% 
  summarise(avg_pop = mean(Population_female_of_total_)) %>%
  head(3)
```

Why use pipes?
========================================================
Here are two pieces of code that return exactly the same thing. What do you think about their readability?


```{r eval=FALSE}
# piped way
df %>%
  group_by(Country_Name) %>%
  summarise(Life_expectancy = max(Life_expectancy_at_birth_female_years_)) %>%
  arrange(Life_expectancy)
```

```{r eval=FALSE}
# same functions, no pipes
arrange(summarise(group_by(df, Country_Name), Life_expectancy = max(Life_expectancy_at_birth_female_years_),Life_expectancy))
```

<div class = 'img-block' align="right">
<img src="https://pics.me.me/could-you-not-memeful-com-via-9gag-com-14187083.png" height=200px>
</div>


Let's get to it!
========================================================
class: small-code
### Step 0 - let's look at the data again
#### Our question: what is the maximum life expectancy for women across all years?

```{r}
df %>%
  glimpse()
```

Exercise 1, step 1
========================================================

```{r}
df %>%
  group_by(Country_Name)
```

Exercise 1, step 2
========================================================

```{r}
df %>%
  group_by(Country_Name) %>%
  summarise(Life_expectancy = max(Life_expectancy_at_birth_female_years_, na.rm = TRUE))
```


Exercise 1, step 3 + assignment
========================================================
```{r}
df_example_1 <- df %>%
  group_by(Country_Name) %>%
  summarise(Life_expectancy = max(Life_expectancy_at_birth_female_years_, na.rm = TRUE)) %>%
  arrange(desc(Life_expectancy))
```


Exercise 2, step 0
========================================================
class: small-code
### Let's look at the data
#### Our new question is: what is the average female population over time?
```{r}
df %>%
  head()
```

Exercise 2, step 1
========================================================

```{r}
df %>%
  group_by(year)
```

Exercise 2, step 2
========================================================

```{r}
df %>%
  group_by(year) %>%
  summarise(avg_population_female = mean(Population_female_of_total_))
```

Exercise 2, step 3 + assignment
========================================================

```{r}
df_example_2 <- df %>%
  group_by(year) %>%
  summarise(avg_population_female = mean(Population_female_of_total_)) %>%
  arrange(desc(year))
```



A bit more theory: tidy data concept
========================================================

<div class = 'img-block' align="center">
<img src="https://cdn-images-1.medium.com/max/1600/1*_64CzT-YicPKgCEJsOi6_A.png" >

<img src="https://d33wubrfki0l68.cloudfront.net/8350f0dda414629b9d6c354f87acf5c5f722be43/bcb84/images/tidy-8.png" >
</div>



spread() & gather()
========================================================
class: small-code
### tidyverse (tidyr) way
```{r echo=F}
phones_data_wide <- cbind(as_tibble(WorldPhones), rownames(WorldPhones)) %>%
  rename(year = `rownames(WorldPhones)`)

phones_data_long <- cbind(as_tibble(WorldPhones), rownames(WorldPhones)) %>%
  rename(year = `rownames(WorldPhones)`) %>% 
  gather(country, number, -year)
```
```{r}
phones_data_wide %>%
  head(3)

phones_data_wide %>% gather(country, number, -year) %>% head(5)

phones_data_long %>% spread(country, number) %>% head(3)
```


A bit more explanation
========================================================
### gather()
<div class = 'img-block' align="center">
<img src="./pics_for_presentation/gather.png" >
</div>
### spread()
<div class = 'img-block' align="center">
<img src="./pics_for_presentation/spread.png" >
</div>


Exercise 3, step 0
========================================================
class: small-code
### Let's look at the data
#### What has fertility rate been like in the past 5 years in each country?

```{r}
df %>%
  head()
```


Exercise 3, step 1
========================================================
class: small-code
```{r}
df %>% 
  top_n(20, year)
```
#### Why?


Side note: top_n()
========================================================
class: small-code
incremental: true
```{r}
df %>% 
  top_n(20, year) %>% 
  pull(year)
```
#### Things to note:
- top_n() returning multiple values of year - why?
- pull() versus select()

```{r}
df %>% arrange(year) %>%
  top_n(20,year) %>%
  select(year, Country_Code)

```



Continuation: top_n()
========================================================
class: small-code
```{r}
df %>% arrange(year) %>%
  top_n(20,year) %>%
  select(year, Country_Code) %>% head(5)
```

```{r}
df %>% 
  select(Country_Name, Fertility_rate_total_births_per_woman_, year) %>%
  spread(Country_Name, Fertility_rate_total_births_per_woman_) %>%
  top_n(5, year)
```



Exercise 3, step 1
========================================================
```{r}
df %>% 
  top_n(20, year) %>% 
  group_by(Country_Name, year)
```


Exercise 3, step 2
========================================================
class:small-code
```{r}
 df %>% 
  top_n(20, year) %>% 
  group_by(Country_Name, year) %>%
  select(Fertility_rate_total_births_per_woman_) 
```
Things to note:
- top_n() hacking
- selecting just one column still selects that column + groups


Exercise 3, step 3 + assignment
========================================================
class:small-code
incremental:true

#### Time to try out spread()
##### Before spread():
```{r}
## old data:
 df %>% 
  top_n(20, year) %>% 
  group_by(Country_Name, year) %>%
  select(Fertility_rate_total_births_per_woman_) %>% head(3)
```

##### After spread():
```{r}
## spread data:
df %>% 
  top_n(20, year) %>% 
  group_by(Country_Name, year) %>%
  select(Fertility_rate_total_births_per_woman_) %>%
  spread(Country_Name, Fertility_rate_total_births_per_woman_)
```



New verb: mutate()
========================================================
incremental:true

<div class = 'img-block' align="center" style = "z-index:0;position:absolute;top:100px;margin-left:auto;margin-right:auto;">
<img src="./pics_for_presentation/tidy_verbs.png" height=800>
</div>



Compare to the Base R way: simple mutate (no groups)
========================================================
class:small-code
```{r eval=FALSE}

df$ratio <- df$Life_expectancy_at_birth_male_years_ / df$Life_expectancy_at_birth_female_years_
head(df$ratio, 3)

df %>% 
  mutate(ratio = Life_expectancy_at_birth_male_years_ /
            Life_expectancy_at_birth_female_years_) %>%
  select(ratio) %>%
  head(3)
```


Exercise 4, step 0
========================================================
class:small-code
### Let's look at the data
#### What is male/female population share is like for the last available year?

```{r}
df %>% 
  filter(year == max(year)) 

```

Exercise 4, step 1
========================================================
class:small-code

```{r}
df %>%
  select(year, Country_Name, Population_ages_15_64_female, Population_ages_15_64_total, Population_ages_15_64_male) %>%
  na.omit() 

```



Exercise 4, step 2
========================================================
class:small-code

```{r}
df %>%
  select(year, Country_Name, Population_ages_15_64_female, Population_ages_15_64_total, Population_ages_15_64_male) %>%
  na.omit() %>%
  filter(year == max(year))
```


Exercise 4, step 3
========================================================
class:small-code

```{r}
df %>%
  select(year, Country_Name, Population_ages_15_64_female, Population_ages_15_64_total, Population_ages_15_64_male) %>%
  na.omit() %>%
  filter(year == max(year)) %>%
  mutate(population_female_from_all = Population_ages_15_64_female/Population_ages_15_64_total,
         population_male_from_all = Population_ages_15_64_male/Population_ages_15_64_total)
```


Exercise 4, step 4 - assignment
========================================================
class:small-code

```{r}
df_example_4 <- df %>%
  select(year, Country_Name, Population_ages_15_64_female, Population_ages_15_64_total, Population_ages_15_64_male) %>%
  na.omit() %>%
  filter(year == max(year)) %>%
  mutate(population_female_from_all = Population_ages_15_64_female/Population_ages_15_64_total,
         population_male_from_all = Population_ages_15_64_male/Population_ages_15_64_total) 

```



Exercise 5, step 0
========================================================
class:small-code
### Let's look at the data
#### Not a super exciting question - just trying out more spread()
#### What was inflation like over time in each country? Each country should be its own column
```{r}
df %>%
  select(year, Country_Name, Inflation_consumer_prices_annual_)
```

Exercise 5, step 1
========================================================
class:small-code
incremental:true
#### Before spread():
```{r}
df %>%
  select(year, Country_Name, Inflation_consumer_prices_annual_) %>% head(4)
```

#### After spread():
```{r}
df %>%
  select(year, Country_Name, Inflation_consumer_prices_annual_) %>%
  spread(Country_Name, Inflation_consumer_prices_annual_) 

wide_df <- df %>%
  select(year, Country_Name, Inflation_consumer_prices_annual_) %>%
  spread(Country_Name, Inflation_consumer_prices_annual_) 
```

#### Let's gather it back!

Exercise 5, step 2
========================================================
class:small-code
incremental:true
#### Before gather():
```{r}
wide_df %>% head(3)
```

#### After spread():
```{r}
wide_df %>%
  gather(country, val, -year)
```


Exercise 6, step 0
========================================================
class:small-code
### Let's look at the data
#### What is births to deaths ratio per country?
#### Save country values in own columns
```{r}
df %>%
  select(Country_Name, year, Death_rate_crude_per_1_000_people_, Birth_rate_crude_per_1_000_people_)
```


Exercise 6, step 1
========================================================
class:small-code

```{r}
df %>%
  select(Country_Name, year, Death_rate_crude_per_1_000_people_, Birth_rate_crude_per_1_000_people_) %>%
  mutate(births_per_death = Birth_rate_crude_per_1_000_people_/Death_rate_crude_per_1_000_people_)

```



Exercise 6, step 2
========================================================
class:small-code
#### Next: spread!
```{r}
df %>%
  select(Country_Name, year, Death_rate_crude_per_1_000_people_, Birth_rate_crude_per_1_000_people_) %>%
  mutate(births_per_death = Birth_rate_crude_per_1_000_people_/Death_rate_crude_per_1_000_people_) %>%
  select(Country_Name, year, births_per_death)

```


Exercise 6, step 3 - spread()
========================================================
class:small-code
incremental:true
#### Before spread():
```{r}
df %>%
  select(Country_Name, year, Death_rate_crude_per_1_000_people_, Birth_rate_crude_per_1_000_people_) %>%
  mutate(births_per_death = Birth_rate_crude_per_1_000_people_/Death_rate_crude_per_1_000_people_) %>%
  select(Country_Name, year, births_per_death) %>% head(3)
```


#### After spread():
```{r}
df %>%
  select(Country_Name, year, Death_rate_crude_per_1_000_people_, Birth_rate_crude_per_1_000_people_) %>%
  mutate(births_per_death = Birth_rate_crude_per_1_000_people_/Death_rate_crude_per_1_000_people_) %>%
  select(Country_Name, year, births_per_death) %>%
  spread(Country_Name, births_per_death)
```



Exercise 7, step 0
========================================================
class:small-code
### Let's look at the data
#### What has life expectancy of men vs women been like in the past 5 years?
#### Return one column per country
```{r}
df %>%
  head(3)
```

Exercise 7, step 1
========================================================
```{r}
df %>%
  mutate(life_exp_ratio = Life_expectancy_at_birth_male_years_/
           Life_expectancy_at_birth_female_years_)
```


Exercise 7, step 2
========================================================
class:small-code
```{r}
df %>%
  mutate(life_exp_ratio = Life_expectancy_at_birth_male_years_/
           Life_expectancy_at_birth_female_years_) %>%
  select(life_exp_ratio, 
         year, 
         Country_Name,
         Life_expectancy_at_birth_male_years_,
         Life_expectancy_at_birth_female_years_)
```

Exercise 7, step 3
========================================================
class:small-code
incremental:true
```{r}
df %>%
  mutate(life_exp_ratio = Life_expectancy_at_birth_male_years_/
           Life_expectancy_at_birth_female_years_) %>%
  select(life_exp_ratio, 
         year, 
         Country_Name,
         Life_expectancy_at_birth_male_years_,
         Life_expectancy_at_birth_female_years_) %>%
  # changed my mind!
  select(-Life_expectancy_at_birth_male_years_, 
         -Life_expectancy_at_birth_female_years_) 
```

#### Spread time!



Exercise 7, step 4 - spread!
========================================================
class:small-code
incremental:true

#### Before spread():
```{r}
df %>%
  mutate(life_exp_ratio = Life_expectancy_at_birth_male_years_/
           Life_expectancy_at_birth_female_years_) %>%
  select(life_exp_ratio, year, Country_Name,
         Life_expectancy_at_birth_male_years_,
         Life_expectancy_at_birth_female_years_) %>%  select(-Life_expectancy_at_birth_male_years_, 
         -Life_expectancy_at_birth_female_years_) %>% head(2) # ugly code pls don't repeat :D 
```
#### After spread():
```{r}
df %>%
  mutate(life_exp_ratio = Life_expectancy_at_birth_male_years_/Life_expectancy_at_birth_female_years_) %>%
  select(life_exp_ratio, year, Country_Name,
         Life_expectancy_at_birth_male_years_,
         Life_expectancy_at_birth_female_years_) %>%
  select(-Life_expectancy_at_birth_male_years_, -Life_expectancy_at_birth_female_years_) %>% 
  spread(Country_Name, life_exp_ratio)
```


Exercise 7, step 5 - and assignment
========================================================
class:small-code
```{r}
df %>%
  mutate(life_exp_ratio = Life_expectancy_at_birth_male_years_/
           Life_expectancy_at_birth_female_years_) %>%
  select(life_exp_ratio, year, Country_Name, Life_expectancy_at_birth_male_years_,
         Life_expectancy_at_birth_female_years_) %>%
  select(-Life_expectancy_at_birth_male_years_, 
         -Life_expectancy_at_birth_female_years_) %>%
  spread(Country_Name, life_exp_ratio) %>%
  top_n(5, year)
```
#### Note how top_n() returns real 5 values now, no repetitions

```{r}
df_example_7 <- df %>%
  mutate(life_exp_ratio = Life_expectancy_at_birth_male_years_/
           Life_expectancy_at_birth_female_years_) %>%
  select(life_exp_ratio, year, Country_Name, Life_expectancy_at_birth_male_years_,
         Life_expectancy_at_birth_female_years_) %>%
  select(-Life_expectancy_at_birth_male_years_, 
         -Life_expectancy_at_birth_female_years_) %>%
  spread(Country_Name, life_exp_ratio) %>%
  top_n(5, year)
```



Exercise 8, step 0
========================================================
class:small-code
### Let's look at the data
#### Another spread! What is GDP growth like across years?
#### Return year as a column
```{r}
df %>%
  head()
```


Exercise 8, step 1 - spread!
========================================================
class:small-code
incremental:true
### Before spread()
```{r}
df %>%
  select(GDP_growth_annual_, year, Country_Name)
```

### After spread()
```{r}
df %>%
  select(GDP_growth_annual_, year, Country_Name) %>%
  spread(year, GDP_growth_annual_)
```

##### Now let's gather the data back (for fun!)



Exercise 8, step 2 - gather!
========================================================
class:small-code
incremental:true
### Before gather()
```{r}
wide_data <- df %>%
  select(GDP_growth_annual_, year, Country_Name) %>%
  spread(year, GDP_growth_annual_)
wide_data %>% head(3)
```

### After gather()
```{r}
wide_data %>%
  gather(year, val, -Country_Name)
```

Visualisations, Line Graph  
========================================================
class:small-code
incremental:true
```{r}
melted_df_example_7 <- melt(df_example_7, id="year") 
```

```{r}
plot_1 <- ggplot(data = melted_df_example_7, 
                 aes(x = year, y = value, color = variable)) +
           geom_line()

plot_1 <- plot_1 + theme_bw()
plot_1 <- plot_1 + labs(x = 'Year', 
                        y = 'Life Expectancy Ratio', 
                        title = '')
plot_1
```

Visualisations, Line Graph  
========================================================
```{r}
plot_2 <- ggplot(df_example_2, 
                       aes(x = year, y = avg_population_female)) +
          geom_point(color = 'purple') + 
          geom_line(size = 5, alpha = 0.3)

plot_2 
#<- plot_2 +
#scale_y_continuous(limits = c())
```

Visualisations, Bar Graph  
========================================================
```{r}
melted_df_example_3 <- melt(df_example_3, id="year") 
```
```{r}
plot_3 <- ggplot(data = melted_df_example_3, 
                 aes(x = year, y = value)) +
        geom_bar(stat = 'identity', aes(fill = variable))

plot_3 <- plot_3 + 
          theme_gray() +
          labs(x = 'Year', 
               y = 'Total Births Per Woman', 
               title = 'Fertility Rate Total Births Per Woman Group by Country',
               fill = 'Country')

plot_3
```

Visualisations, Bar Graph  
========================================================
```{r}
plot_4 <- ggplot(data = melted_df_example_3, 
                 aes(x = year, y = value)) +
          geom_bar(stat="identity",
                   aes(fill = variable), width=.5, position = "dodge")  
          


plot_4 <- plot_4 +
          labs(x = 'Year', 
               y = 'Total Births Per Woman', 
               title = 'Fertility Rate Total Births Per Woman Group by Country',
               fill = 'Country')

plot_4
```
